# This is an example configuration for a deployment
# we could use it by calling fabric with
# `fab -c fab_example.ini`
# each value can contain variables... for example if we set
# `HOME = /home/user`
# we can then use other values relative to that HOME:
# `FOLDER_IN_HOME = {home}/folder
# evalutated from top to bottom

[deployment]
# the name of this deployment will be printed when doing actions
NAME = Example configuration
# the hosts comma separated where we will deploy
hosts = hostname
# the SSH port we should use (default to 22)
REMOTE_SSH_PORT = 22
# if the machine use supervisor set it here, so we will use supervisor to start/stop istances
# the restart is made directly to gunicorn however to be graceful
USE_SUPERVISOR = False

# the GIT repository where we should pull sources on deploy
GIT_REPOSITORY = git@github.com:...

[folders]
# define a variable BASE_REMOTE I will use later....
BASE_REMOTE = /var/www/app

# where are the sourcecode (manage.py should be here too)?
REPOSITORY_FOLDER = {BASE_REMOTE}/project
# where is the virtualenv?
VENV_FOLDER = {BASE_REMOTE}/.environment
# where we should take the requirements?
REQUIREMENT_PATH = {REPOSITORY_FOLDER}/requirements.txt

# Static folder will be filled by django collectstatic
STATIC_FOLDER = {REPOSITORY_FOLDER}/static
# This is for UGC
MEDIA_FOLDER = {REPOSITORY_FOLDER}/media

# we will create a bash script to start/stop/restart gunicorn here
RUN_GUNICORN_COMMAND = {REPOSITORY_FOLDER}/run_gunicorn

# folder where we should place gunicorn logs and its pid file
LOGDIR = {REPOSITORY_FOLDER}/logs

[gunicorn]
# we describe how to run Gunicorn here
GUNICORN_PORT = 12345
GUNICORN_WORKERS = 2
GUNICORN_PID_FILE = {LOGDIR}/gunicorn.pid
GUNICORN_LOGFILE = {LOGDIR}/gunicorn.log
# timeout in seconds - keep high to handle large files upload
GUNICORN_WORKERS_TIMEOUT = 360
# set here the python module name of your wsgi application
WSGI_APPLICATION = wsgi:application

[secrets]
# I can define a secret file (with private settings) which won't be placed on repository
# so I can call the "send_secrets" command to send it directly via SSH
SECRETS_FILE = settings_local.py
